name: scientific
version: 0.3.4.6
id: scientific-0.3.4.6-1ab4e6adc9c544f43921f36416a84ae2
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
             arbitrary precision and space efficient. They are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
             The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
             @e :: 'Int'@. A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             Note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision. I intend to change the type of the exponent
             to 'Integer' in a future release.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/chbatey/dev/learn/haskell/hsg-cabal/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.4.6
library-dirs: /home/chbatey/dev/learn/haskell/hsg-cabal/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/scientific-0.3.4.6
hs-libraries: HSscientific-0.3.4.6
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.2-cb23b5265b6e147094c0cd9ac819acb1
         binary-0.7.1.0-c62239d56a29611b3d56fd96592f602d
         bytestring-0.10.4.0-e82797828c29adab75d6eb4b53384f09
         containers-0.5.5.1-d7910f1cd81272c1f31ca9f71d0f206e
         deepseq-1.3.0.2-0ddc77716bd2515426e1ba39f6788a4f
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.4.0-0de2d5bcfed8f3c44c933a6678debf75
         integer-gmp-0.5.1.0-26579559b3647acf4f01d5edd9491a46
         text-1.2.2.1-b7d550087907b79dc8d5adc9aafeab0b
         vector-0.11.0.0-0fe1c3be2e0ae50df6981a6f1bececf3
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/chbatey/dev/learn/haskell/hsg-cabal/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.4.6/html/scientific.haddock
haddock-html: /home/chbatey/dev/learn/haskell/hsg-cabal/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/scientific-0.3.4.6/html
